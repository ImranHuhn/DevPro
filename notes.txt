centering elements with css:
-use "display:flex" in the parent and "justify-content:center" or 
-use position absolute:
    -if you use absolute
    -you must make the parent "position: relative"
    -then in the "position: absolute: element add the following style properties
        -top: 50%
        -left: 50%
        -transform: translate(-50%, -50%)

=======================
git
-task tickets should be either bug, fix, refactor, or new feature
-if you have a branch that is different, merge the last branch feature and "$ npm install" in the terminal to make sure you have all the latest changes and dependencies 
======================
git:
-you can combine adding all file and committing files with the following command:
$ git commit -am "<message>"
===================================
git:
-before pullrequest(pr)
    -$ git add .
    -$ git commit -m "message"
    -$ git push origin <branch>

-open pr
    -$ git add .
    -$ git commit -m "message"
    -$ git push origin <branch>
    -@github => new pull request
    -@github => settings>collaborators>add user>open pull request>reviewers>add users>create pull request
    -(maybe) $ git checkout main
    -(maybe) $ git merge <branch>

-after pr with request change
    -make changes locally
    -$ git add .
    -$ git commit -m "message"
    -$ git push origin <branch>
    -@github => click "resolve conversation"
    -@github => click "merge pull request"
    -click "confirm merge"
    -$ git checkout main
    -$ git pull main



================================
react importing order:
1-node modules (without paths)
2-components (without paths)
3-relative files (with paths)

================================

-from react
-from react-router-DOM
-styled-components (without paths)
-pages (without paths)
-styles/globalStyles (with path)
-files with "./" or "/" or "../"

==============================
react:
-event listeners can only be in element tags, not component tags
-if you see "props" in a component or function, that means that function/data exist in the parent component
-props for function based componenets dont use "this" keyword. class based components, use "this" keyword
-always set default value for input with an empty string in the beginning, otherwise you'll get errors

===========================================
react:
-event handlers should be done in the child components, and getting the value from an event trigger is handled at the parent component where there's state
-props should not exist where state is present. just like set state functions should only exists where state is present
-when breaking components down, start with a functional component first. then if state is need in the that functional component, convert it to a class component with state
-when there is a "this" keyword with a function, it is an indicator that it lives in that component
==============================
react:
-event listeners can only be in element tags, not component tags
-if you see "props" in a component or function, that means that function/data exist in the parent component
-props for function based componenets dont use "this" keyword. class based components, use "this" keyword
-always set default value for input with an empty string in the beginning, otherwise you'll get errors

===========================================
react:
-event handlers should be done in the child components, and getting the value from an event trigger is handled at the parent component where there's state
-props should not exist where state is present. just like set state functions should only exists where state is present
-when breaking components down, start with a functional component first. then if state is need in the that functional component, convert it to a class component with state
-when there is a "this" keyword with a function, it is an indicator that it lives in that component
-difference between a functional component and a normal function is that a functional component return JSX/HTML and a normal function does not
=============
css:
-to customize radio button you have to customize a seperate element and place the input radio to opacity to fully tranceparent and right over the element
==============================
react ui:
-if object is undefined in the ui, it's is probably because the initial state is a string. if it is, it will crash and expect a string
=======================================
react file structures:
-utils folder for react component that don't export
-function components are for components with no state
=====================================
lifting up state:
-replace this.state.<component> with this.props.<component>
-props are read-only
-props are data used to transfer and can only be read. state is data that gets changed/manipulated
-state is usually in the component with inputs where users input data or state is where the parent has child components with inputs
-We know that props are read-only. When the temperature was in the local state, the TemperatureInput could just call this.setState() to change it. However, now that the temperature is coming from the parent as a prop, the TemperatureInput has no control over it.
In React, this is usually solved by making a component “controlled”. Just like the DOM <input> accepts both a value and an onChange prop, so can the custom TemperatureInput accept both temperature and onTemperatureChange props from its parent Calculator.
Now, when the TemperatureInput wants to update its temperature, it calls this.props.onTemperatureChange:
-setState can only be used where the state is

========================================
react notes from react docs:
-You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy (i.e. starting with FilterableProductTable) or with the ones lower in it (ProductRow). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.
-top hierarchy physically starts at the bottom of the file
-if hierarchy is at the same level, then data should take top priority
-To build your app correctly, you first need to think of the minimal set of mutable state that your app needs. The key here is DRY: Don’t Repeat Yourself. Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand.
-The original list of products is passed in as props, so that’s not state. The search text and the checkbox seem to be state since they change over time and can’t be computed from anything. And finally, the filtered list of products isn’t state because it can be computed by combining the original list of products with the search text and value of the checkbox. So finally, our state is: (1) The search text the user has entered. (2)The value of the checkbox
-Remember: React is all about one-way data flow down the component hierarchy. It may not be immediately clear which component should own what state. This is often the most challenging part for newcomers to understand, so follow these steps to figure it out:
For each piece of state in your application:
Identify every component that renders something based on that state.
Find a common owner component (a single component above all the components that need the state in the hierarchy).
Either the common owner or another component higher up in the hierarchy should own the state.
If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.
-app that renders correctly as a function of props and state flowing down the hierarchy. Now it’s time to support data flowing the other way
-Let’s think about what we want to happen. We want to make sure that whenever the user changes the form, we update the state to reflect the user input. Since components should only update their own state, FilterableProductTable will pass callbacks to SearchBar that will fire whenever the state should be updated. We can use the onChange event on the inputs to be notified of it. The callbacks passed by FilterableProductTable will call setState(), and the app will be updated.
-fragments are commonly used to prevent messing up table elements. so instead of divs, use fragment elements

===============================================

conditionals that only work in functions:

-// same as "if(condition) {return}" if the condition is true then stop here and return nothing. if condition is false, then run all lines after this line. this helps to check if an input field is empty or not:

function foo(){
    if(condition) return;
    console.log("test")
}
foo()

-// this is exactly the same as "else statement". if condition is true it returns 1. if condition is false it returns 2:

function foo(){
    if(condition) {
        return "1";
    }
    return "2"
}

========================================

different ways of using conditional statements:
- if(condition) { codeblock }    // known as "if statement" aka "guard blocks". if condition is true, run the codeblock and run the lines after it. if false skip code block and run the lines after
- if(condition) { codeblock } else { codeblock }    // known as "else statement". else is expected to always return which is why it's the default unless a special condition stops it .
- if (condition) { codeblock } else if (condition) { codeblock } else { codeblock }     // known as "else if statement"

=========================
css:
-use padding to push elements in, use margin to push elements away
-to have elements at the end of window but not outside of it, use translate and calculate 100% minus the element width itself ex: translate(calc(100vw - sizeOfElement))
-use transform on the element that is already there, not on the hover or animated element
===================
boolean value for coniditions:
-use negate(!) or double negate(!!) operator to turn any non-boolean output into a boolean value for conditional statements
=========================
-conditions if an array is empty, you will have to use double negate "!!" to skip the first condition when an array is empty. then operate normally when it is filled with atleast 1 thing in the array
========================
You can also approximate an if/else using only Logical Operators.

(a && b) || c
The above is roughly the same as saying:

a ? b : c
And of course, roughly the same as:

if ( a ) { b } else { c }
I say roughly because there is one difference with this approach, in that you have to know that the value of b will evaluate as true, otherwise you will always get c. Bascially you have to realise that the part that would appear if () { here } is now part of the condition that you place if ( here ) {  }.

The above is possible due to JavaScripts behaviour of passing / returning one of the original values that formed the logical expression, which one depends on the type of operator. Certain other languages, like PHP, carry on the actual result of the operation i.e. true or false, meaning the result is always true or false; e.g:

14 && 0          /// results as 0,  not false
14 || 0          /// results as 14, not true
1 && 2 && 3 && 4 /// results as 4,  not true
true && ''       /// results as ''
{} || '0'        /// results as {}
One main benefit, compared with a normal if statement, is that the first two methods can operate on the righthand-side of an argument i.e. as part of an assignment.

d = (a && b) || c;
d = a ? b : c;

if `a == true` then `d = b` else `d = c`
The only way to achieve this with a standard if statement would be to duplicate the assigment:

if ( a ) { d = b } else { d = c }
You may ask why use just Logical Operators instead of the Ternary Operator, for simple cases you probably wouldn't, unless you wanted to make sure a and b were both true. You can also achieve more streamlined complex conditions with the Logical operators, which can get quite messy using nested ternary operations... then again if you want your code to be easily readable, neither are really that intuative.
=====================
inline conditional(if) statements
-'true && expression' runs expression
-'false && expression' skips expression
-'true ? expression1 : expression2' runs expression1
-'false ? expression1 : expression2' runs expression2
-'expression1 || expression2' if expression1 exist, run expression1. expression1 doesn't exist, run expression2
===============
react functional componenet vs class component:
-if a component has state, use class component. 
-if a component doesnt have state, use a functional component
=====================
closures:
-inner function has access to variable and functions defined outside of the inner function
===========
react naming conventions:
-components should be capital
-In React, it’s conventional to use on[Event] names for props which represent events and handle[Event] for the function definitions which handle the events.
====================
react order/organication:
-make sure to define a function or component before calling. so function define goes right above the function invokation and function invokation goes right below function definition
====================
images:
-use background-image in css is preferred/better instead of using img tags
===========================
react components vs function:
-the difference is that components return JSX/HTML tags and are capitalized
-functions execute/run action code. it mutates or calculate or manipulate code

====================================
html/css class and id naming:
-use class for css targeting
-use id for javascript targeting

===========================
functions:
-if the contents inside a function is not being returned, it will return undefined by default
-if you need the value from a function, you must use return
-if you only need a function to only do action, there is no need for return
===============================
clean-code:
-functions should only do one thing
-function name should say what it does
-function to check boolean value use "has, is, or a true/false statement"
-put conditionals in a function and use a descriptive function name in the conditional statement
-avoid negative conditionals
-keep the invoked functions directly above the originally created function
============================
-In React, it’s conventional to use on[Event] names for props which represent events and handle[Event] for the function definitions which handle the events.
=================
-data is just objects and arrays. like an excel spreadsheet, objects are array, columns are properties, and the entire spreadsheet is the array
-for setIntervals, create a variable in the global scope to have access globally. then initialize the global variable in a function and you can use clearInterval anywhere in the code globally or within a function.
=====================================

react:
-props should be used maximum 3 levels. of component, not including itself when setting up


=======================================

good practice:
-use === over == to prevent coercion
-use !== over != to prevent coercion
-use const over let
-use addEventListeners('click', ()=>{}) over .Onclick(){} to prevent overwriting other event listeners
-seperate data from ui. when change occurs in javascript, dont target ui. to do this put it in a variable and have the ui reflect the variable instead of directly targeting the ui. for security purposes to prevent hackers changing the data through the ui. prevent code injection. always use 2 variables to juggle with, one for ui and the other for data. you can achieve this by creating temporary const variable within the scope of the function
-use double exclamation to turn a number (0 or 1) into a boolean for conditions "!!"
-when declaring variable for numbers that starts off empty, make it an empty string because it is easy to convert the string to a number in the code later on
-commonly used array method: map & filter, find, reduce, splice
-if/else statements should check if normal conditions are false first. so that you can handle the exceptions/special cases first. You want to check things out of the ordinary before going back to normal conditions.
-if/else statements. False is more reliable because it is more obvious. A defintition can be false, or not false. In Programming, 0 is false, whereas 1 is true, but 2 would also be true. That's why we'd rather check for the absolute false, than for all the eventually not false cases.
-if/else statement. if you check for true conditions first and they exist, it will exit the code and never find the false condition. where if we search for false conditions first and if there are none, it will then search for true conditions (true conditions are suppose to exist by default) and execute. "Before you eat a burger, you want to check if it doesn't contain poop first. if false, you don't eat. if true you eat"
-if/else statement: checking for "false" is not a question performance, it's a question of Cyclomatic complexity. Let me make it clear: Imagine that you have to get 4 or 5 conditions true before you'd be able to make an action. This would be/get really complicated to understand. You should apply the "leave early" rule, by checking for "false" first. 
-if/else statements. exceptions must be handled first
-conditions like if/else should not include the ui, it should be determined/compared by the data

==========================================
Troubleshooting
1.	Comment out the parts that are not working
2.	Comment out the parts that are irrelevant
3.	After commenting out those parts, there should only be parts that are working
4.	Uncomment one line of code, and work on it until it works
5.	Then uncomment another line of code and work on it until it works
6.	Cycle through 5 and 6


Problem solving / how to build


========================================
refactor strategies:
-if there are repeated lines inside if/else or switch statements (aka conditional staments), bring it outside of the conditional statement and replace the non-repeatable lines with the entire conditional statements itself.


======================================

Array Methods:

-mutable array methods
    -modifies original array
        -list of most commonly used mutable array methods:
            pop()
            push()
            reverse()
            shift()
            sort()
            splice()
            unshift()

-immutable array methods
    -creates a new array
        -list of most commonly used immutable array methods:
            concat()
            filter()
            map()
            slice()
            splice() (when removed arrays are returned, this method creates a new array)

===========================================

data structures. Arrays and Objects:

[ {a:b}, {c:d}, {e:f} ]

{ x:{a:b}, y:{c:d}, z:{e:f} }

{ x:[a,b,c], y:[d,e,f], z:[h,i,j] }

{ x:{a:b}, y:c, z:[d,e,f] }

-items inside an object must have a key / value pair. there has to be a name or label associated to each object item
-in arrays, order matters and categroical grouping doesn't. in objects, order doesn't matter, but most common categrotical grouping matters.
-if there's multiple repeatable data, use array. why, because if there are multiple objects of the same structure of data, the one below will override the previous data.
-when you console.log(window), Objects will display first then an array of properties. under [[Prototype]], you will see the arrays of properties.
=================================================================================================================================

JavaScript: Understanding the Weird Parts - The First 3.5 Hours video

-lexical environment
    -where code is physically stored in system's memory

-syntax parser
    -program that converts/translate code to computer/machine language

-execution context
    -code management that focuses on code one at a time (code that is currently executing/running).
    -within the scope of the code black that is running/executed
    -execution context creates 4 things
        (1) global object(which is 'window' aka browser)
        (2) this (which is just the global object but in a variable called this)
        (3) outer environment (at the global level, this is just null because there's  nothing outside. at a function level, the outside environment is the global object. or a function inside a function, the outer environment is the parent/outer function)
        (4) current/executed/running code (the function/code block that's running)

-object
    -object is just a collection of name/value pairs (or key/value pairs). not concerning order like array does

-global
    -just means, not inside a function/code block

-variable
    -initialize means variable with value
    -declaration means variable with NO value

-hoisting
    -for functions, javascript is able to execute/call functions before the function block itself
    -for variables, javascript is able to declare a variable with a value but cannot initialize item
    -functions are stored in memory by entirety/as whole including code block inside while variables are initialized with a placeholder called "undefined". variables get initialized with a value during the execution of the code, line by line.
    -javascript first goes through the creation phase, then execution phase. all variables are first initialized with undefined in the creation phase and all functions are created as a whole including the code block inside
    -the reason for this hoisting behavior is because before executing/running the code line by line, javascript first stores the variables and functions in memory. once executed line by line, javascript can retreive the variables and functions.

-undefined vs not defined
    -undefined means variable is declared and saved in memory but has no value
    -not defined means the variable doesn't exist in memory because it was never created/declared

-execution stack
    -execution stack are a collection of execution context(function calls) in the order in which they were executed, starting from bottom to top
    -basically a group of functions that are still running or tasks that have not yet been completed

-javascript phases
    -phase 1 is creation phase which saves stuff in memory. saves lines that start with creation phase keywords like "function", "const", "let", and "var" in physical memory.
    -phase 2 is execution phase which takes actionable steps line by line. executes code that does not start with creation phase keywords
        -in the execution phase, an "execution context" gets created 
        -when there's a line where a function gets called/invoked, that function gets added to the execution stack. if another function gets called, it gets added on top of the previous function and samething for the next function.
        all execution phases starts with a global execution context. then when a function is called, that function(aka execution conext) gets stacked on top of the global execution context. then the next function(aka execution conext) gets stacked on top of the previous function(aka execution context) coninuously until each function's tasks are completed
        -the top execution context in an execution stack does not have access to the variables in the execution context below it. in other words, the top execution context is the top function of the bottom function, so the top function doesnt have access to the bottom function but the bottom function has access to the top function

-single threaded
    -one command at a time in javascript

-synchronous execution
    -one command at a time in order in javascript

-invocation
    -running a function. functions are invoked using  parenthesis "()"

-create and execute cycle for function
    -each function calls gets created and executes the code inside it

-variable environments
    -where variables are located
    -variables stay within the scope of the function where it was created
    -each function that was called creates a variable environment where variables gets saved

-scope
    -scope is where a variable is accessable
    -within a code block
    -within an execution context
    -within a function
    -within curly brackets { }

-scope vs execution stack
    -both accesses variables differently
    -in scope, functions have access to variables outside of the functio(codeblock)
    -in execution stack, functions that are called don't have access to variables below the stack
    -execution stack deals with functions that are not nested within each other but called within each other.
    -scope deals with functions that are nested within each other
    -executions stack cares about parenthesis "()" and scope cares about curly brackets "{}". in other words, executions stack cares about where function is called and scope cares about where functions are created

-asynchronous
    -means more than one at a time
    -javascript operate synchronously, but can execute commands outside of itself to the browser. it is at the browser level where asynchrouns tasks can happen but cannot happen within javascript
    -asynchronous usually happens with event listeners, data, or callback functions

-event queue
    -event listeners
    -when execution stack is finished and empty, javascript looks for any events that was triggered

-dynamic types
    -javascript can figure out the type of variables unlike other programs languages like java where you have to explicitly use keyword types for variables

-primitive types in JavaScript 
    -undefinied
        -js engines default value when variable is declared. programmers should never initialize a variable as undefined
    -null
        -null is the same as undefinied but the programmer initializes it as null. undefinied is set as default my the js engine and the programmer should never set a variable as undefined.
    -boolean
        -true or false
    -number
    -string
    -symbol
        -new in ES6

-operators
    -takes two or more parameters. calculates the parameters and returns a result

-operator precedence
    -which operator gets calculated first
    -PEMDAS

-operator associativity
    -which operator of the same importance gets calculated first
    -in PEMDAS it is Multiplication vs Division vs Remainder(modulus) and Addition vs Subtraction

-coercion
    -convert a value's data type to a different data type. like a number to a string

-objects
    -in an object, a value that is a primitive data is called a property
    -in an object, another object is also called a property
    -in an object, a function is called a method

=================================================================================================================================

-callback
    -calling a function as a parameter from inside another function. a nested function

-return
    -within the codeblock, code does not execute/run after "return;"
    -return is the result of a function or codeblock
    