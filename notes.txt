data structures. Arrays and Objects:

[ {a:b}, {c:d}, {e:f} ]

{ x:{a:b}, y:{c:d}, z:{e:f} }

{ x:[a,b,c], y:[d,e,f], z:[h,i,j] }

{ x:{a:b}, y:c, z:[d,e,f] }

-items inside an object must have a key / value pair. there has to be a name or label associated to each object item
-in arrays, order matters and categroical grouping doesn't. in objects, order doesn't matter, but most common categrotical grouping matters.
-if there's multiple repeatable data, use array. why, because if there are multiple objects of the same structure of data, the one below will override the previous data.
-when you console.log(window), Objects will display first then an array of properties. under [[Prototype]], you will see the arrays of properties.
=================================================================================================================================

JavaScript: Understanding the Weird Parts - The First 3.5 Hours video

-lexical environment
    -where code is physically stored in system's memory

-syntax parser
    -program that converts/translate code to computer/machine language

-execution context
    -code management that focuses on code one at a time (code that is currently executing/running).
    -within the scope of the code black that is running/executed
    -execution context creates 4 things
        1) global object(which is 'window' aka browser)
        2) this (which is just the global object but in a variable called this)
        3) outer environment (at the global level, this is just just null because there's  nothing outside. at a function level, the outside environment is the global object. or a function inside a function, the outer environment is the parent/outer function)
        4) current/executed/running code (the function/code block that's running)

-object
    -object is just a collection of name/value pairs (or key/value pairs). not concerning order like array does

-global
    -just means, not inside a function/code block


video time 36:38